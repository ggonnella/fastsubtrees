High priority:
[ ] attribute files:
    [ ] create_json_file
        [ ] implemented IN the library instead of in the external module
        [ ] instead of creating JSON of the whole list, it should create JSON of each element
            and output one element per line
    [ ] change the get_attribute_value()/_list() in attributes.py to use the new format
    [ ] add_subtree() pass optionally the attributefilenames
    [ ] change the binary script for adding a subtree to accept attributefilenames AS OPTIONS


[ ] attribute files must be updated, when nodes are deleted or added:
    - plan what changes are needed in each case (adding a leaf, adding an internal node,
    removing a leaf, removing an internal node)
    - implement them in API methods
    - in the scripts which add/remove nodes: the names of the attribute files
    which must be modified can be passed as optional parameters

Lower priority:
[ ] Make adding of an entire subtree smarter by making place for entire subtree at once
    instead of repeat updating the tree for each node iteratively
[ ] Finish the documentation:
  [ ] API manual:
    - Update the information adding the documentation of the newer functionality added to it
  [ ] CLI manual:
    - Briefly document the function of all the scripts
  [ ] README:
    - add hyperlinks to the API manual and CLI manual files
[ ] Can we handle attributes which are strings? This can be used for non-integer
    node names; i.e. string node names would be stored as attributes
    this allows to generalize the use of the library to cases where the nodes are not
    "consecutive positive integer numbers"; numerical IDs could be assigned
    automatically in such cases

